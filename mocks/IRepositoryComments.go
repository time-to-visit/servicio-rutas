// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-routes/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryComments is an autogenerated mock type for the IRepositoryComments type
type IRepositoryComments struct {
	mock.Mock
}

// DeleteComment provides a mock function with given fields: idComment, idUser
func (_m *IRepositoryComments) DeleteComment(idComment int64, idUser int64) error {
	ret := _m.Called(idComment, idUser)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64, int64) error); ok {
		r0 = rf(idComment, idUser)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindComment provides a mock function with given fields: idRoute
func (_m *IRepositoryComments) FindComment(idRoute int64) (*[]entity.Comments, error) {
	ret := _m.Called(idRoute)

	var r0 *[]entity.Comments
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]entity.Comments, error)); ok {
		return rf(idRoute)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]entity.Comments); ok {
		r0 = rf(idRoute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Comments)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idRoute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterComment provides a mock function with given fields: comment
func (_m *IRepositoryComments) RegisterComment(comment entity.Comments) (*entity.Comments, error) {
	ret := _m.Called(comment)

	var r0 *entity.Comments
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Comments) (*entity.Comments, error)); ok {
		return rf(comment)
	}
	if rf, ok := ret.Get(0).(func(entity.Comments) *entity.Comments); ok {
		r0 = rf(comment)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Comments)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Comments) error); ok {
		r1 = rf(comment)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryComments interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryComments creates a new instance of IRepositoryComments. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryComments(t mockConstructorTestingTNewIRepositoryComments) *IRepositoryComments {
	mock := &IRepositoryComments{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
