// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-routes/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositorySteps is an autogenerated mock type for the IRepositorySteps type
type IRepositorySteps struct {
	mock.Mock
}

// DeleteStep provides a mock function with given fields: idStep
func (_m *IRepositorySteps) DeleteStep(idStep int64) error {
	ret := _m.Called(idStep)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idStep)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindStep provides a mock function with given fields: idRoute
func (_m *IRepositorySteps) FindStep(idRoute int64) (*[]entity.Steps, error) {
	ret := _m.Called(idRoute)

	var r0 *[]entity.Steps
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*[]entity.Steps, error)); ok {
		return rf(idRoute)
	}
	if rf, ok := ret.Get(0).(func(int64) *[]entity.Steps); ok {
		r0 = rf(idRoute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Steps)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idRoute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindStepOne provides a mock function with given fields: idStep
func (_m *IRepositorySteps) FindStepOne(idStep int64) (*entity.Steps, error) {
	ret := _m.Called(idStep)

	var r0 *entity.Steps
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Steps, error)); ok {
		return rf(idStep)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Steps); ok {
		r0 = rf(idStep)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Steps)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idStep)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertStep provides a mock function with given fields: step
func (_m *IRepositorySteps) InsertStep(step entity.Steps) (*entity.Steps, error) {
	ret := _m.Called(step)

	var r0 *entity.Steps
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Steps) (*entity.Steps, error)); ok {
		return rf(step)
	}
	if rf, ok := ret.Get(0).(func(entity.Steps) *entity.Steps); ok {
		r0 = rf(step)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Steps)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Steps) error); ok {
		r1 = rf(step)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositorySteps interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositorySteps creates a new instance of IRepositorySteps. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositorySteps(t mockConstructorTestingTNewIRepositorySteps) *IRepositorySteps {
	mock := &IRepositorySteps{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
