// Code generated by mockery v2.27.1. DO NOT EDIT.

package mocks

import (
	entity "service-routes/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IRepositoryRoutes is an autogenerated mock type for the IRepositoryRoutes type
type IRepositoryRoutes struct {
	mock.Mock
}

// DelRoute provides a mock function with given fields: idRoute
func (_m *IRepositoryRoutes) DelRoute(idRoute int64) error {
	ret := _m.Called(idRoute)

	var r0 error
	if rf, ok := ret.Get(0).(func(int64) error); ok {
		r0 = rf(idRoute)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRoute provides a mock function with given fields: filter
func (_m *IRepositoryRoutes) FindRoute(filter map[string]interface{}) (*[]entity.Routes, error) {
	ret := _m.Called(filter)

	var r0 *[]entity.Routes
	var r1 error
	if rf, ok := ret.Get(0).(func(map[string]interface{}) (*[]entity.Routes, error)); ok {
		return rf(filter)
	}
	if rf, ok := ret.Get(0).(func(map[string]interface{}) *[]entity.Routes); ok {
		r0 = rf(filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.Routes)
		}
	}

	if rf, ok := ret.Get(1).(func(map[string]interface{}) error); ok {
		r1 = rf(filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindRouteOne provides a mock function with given fields: idRoute
func (_m *IRepositoryRoutes) FindRouteOne(idRoute int64) (*entity.Routes, error) {
	ret := _m.Called(idRoute)

	var r0 *entity.Routes
	var r1 error
	if rf, ok := ret.Get(0).(func(int64) (*entity.Routes, error)); ok {
		return rf(idRoute)
	}
	if rf, ok := ret.Get(0).(func(int64) *entity.Routes); ok {
		r0 = rf(idRoute)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Routes)
		}
	}

	if rf, ok := ret.Get(1).(func(int64) error); ok {
		r1 = rf(idRoute)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertRoute provides a mock function with given fields: routes
func (_m *IRepositoryRoutes) InsertRoute(routes entity.Routes) (*entity.Routes, error) {
	ret := _m.Called(routes)

	var r0 *entity.Routes
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.Routes) (*entity.Routes, error)); ok {
		return rf(routes)
	}
	if rf, ok := ret.Get(0).(func(entity.Routes) *entity.Routes); ok {
		r0 = rf(routes)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.Routes)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.Routes) error); ok {
		r1 = rf(routes)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIRepositoryRoutes interface {
	mock.TestingT
	Cleanup(func())
}

// NewIRepositoryRoutes creates a new instance of IRepositoryRoutes. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIRepositoryRoutes(t mockConstructorTestingTNewIRepositoryRoutes) *IRepositoryRoutes {
	mock := &IRepositoryRoutes{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
